
syntax = "proto3";
package gen_ch_schema;

option go_package = "github.com/jdxhu/protoc-gen-ch-schema/protos";

import "google/protobuf/descriptor.proto";

extend google.protobuf.MessageOptions {


    // ClickHouse message schema generation options.
    //
    // The field number is a globally unique id for this option, assigned by
    // protobuf-global-extension-registry@google.com
    ClickHouseMessageOptions clickhouse_opts = 18123;
}

message ClickHouseMessageOptions {
    // Specifies tabel in ClickHouse for the message.
    // table_name should be db.table format
    string table_name = 1;

    // If true, ClickHouse field names will default to a field's JSON name,
    // not its original/proto field name.
    bool use_json_names = 2;

    // If set, adds defined extra fields to a JSON representation of the message.
    // Value format: "<field name>:<ClickHouse field type>" for basic types
    // or "<field name>:Nested:<protobuf type>" for message types.
    // "NULLABLE" by default, different mode may be set via optional suffix ":<mode>"
    repeated string extra_fields = 3;

    // If set will output the schema file order based on the provided value.
    enum FieldOrder {
        FIELD_ORDER_UNSPECIFIED = 0;
        FIELD_ORDER_BY_NUMBER = 1;
    }
    FieldOrder output_field_order = 4;

    // table define
    // check clickhouse doc for more details
    // https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree
    // CREATE TABLE IF NOT EXISTS [db.]table_name [ON CLUSTER cluster]
    // (
    //     name1 [type1] [[NOT] NULL] [DEFAULT|MATERIALIZED|ALIAS|EPHEMERAL expr1] [COMMENT ...] [CODEC(codec1)] [STATISTIC(stat1)] [TTL expr1] [PRIMARY KEY] [SETTINGS (name = value, ...)],
    //     name2 [type2] [[NOT] NULL] [DEFAULT|MATERIALIZED|ALIAS|EPHEMERAL expr2] [COMMENT ...] [CODEC(codec2)] [STATISTIC(stat2)] [TTL expr2] [PRIMARY KEY] [SETTINGS (name = value, ...)],
    //     ...
    //     INDEX index_name1 expr1 TYPE type1(...) [GRANULARITY value1],
    //     INDEX index_name2 expr2 TYPE type2(...) [GRANULARITY value2],
    //     ...
    //     PROJECTION projection_name_1 (SELECT <COLUMN LIST EXPR> [GROUP BY] [ORDER BY]),
    //     PROJECTION projection_name_2 (SELECT <COLUMN LIST EXPR> [GROUP BY] [ORDER BY])
    // ) ENGINE = MergeTree()
    // ORDER BY expr
    // [PARTITION BY expr]  
    // [PRIMARY KEY expr]  // not in use
    // [SAMPLE BY expr]   // not in use
    // [TTL expr
    //     [DELETE|TO DISK 'xxx'|TO VOLUME 'xxx' [, ...] ]
    //     [WHERE conditions]
    //     [GROUP BY key_expr [SET v1 = aggr_func(v1) [, v2 = aggr_func(v2) ...]] ] ]
    // [SETTINGS name = value, ...]
    
    // 使用的表引擎 默认使用 MergeTree
    enum TableEngine {
        TABLE_ENGINE_UNSPECIFIED = 0;
        MERGE_TREE = 1;
        REPLACING_MERGE_TREE = 2;
        SUMMING_MERGE_TREE = 3;
        // todo: 后续提供其他表的支持
        // AGGREGATING_MERGE_TREE = 4;
        // COLLAPSING_MERGE_TREE = 5;
        // VERSIONED_COLLAPSING_MERGE_TREE = 6;
        // GRAPHITE_MERGE_TREE = 7;
    }
    TableEngine table_engine = 6;

    // 表的排序键 可以大幅提高聚合查询的性能
    // 排序依照click house官方文档定义
    // 可以使用复杂表达式 例如 "toYYYYMMDD(ctime),id"
    // default "ctime"
    string order_by = 7;

    // 数据分区设置 一般按时间分区 月/天/小时
    // 默认不分区 大部分情况按月分区即可满足需求
    enum TIME_PARTITION {
        TIME_PARTITION_UNSPECIFIED = 0;
        MONTH = 1;
        DAY = 2;
        HOUR = 3;
    }
    TIME_PARTITION time_partition = 8;

    // 数据过期设置 指定数据过期时间 过期后数据会被删除
    // 支持月/周/天/小时定义 例如: 3m 2w 1d 6h
    // y: 年，q: 季度，m: 月，w: 周，d: 天，h: 小时，M: 分钟, s: 秒
    // 默认不设置过期时间
    // todo: 后续可能提供过期之后的操作 例如转存到文件或者条件删除
    string ttl = 9;

    // settings 配置键 可以自定义配置
    message Setting {
        string name = 1;
        string value = 2;
    }
    repeated Setting settings = 10;

    // RepalcingMergeTree的版本列
    // 用于去重 保留版本列最大的数据
    // 默认为ctime
    string replacing_version_col = 11;

    // RepalcingMergeTree的删除状态列
    // 用于标记数据是否待删除
    // 默认为is_deleted
    string replacing_deleted_col = 12;

    // SummingMergeTree的聚合列
    // 插入时，聚合列的值会累加
    // 默认为空 代表所有数字类型的字段都会参与聚合
    repeated string summing_aggregate_cols = 13;

}